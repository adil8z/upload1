#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS
#include<math.h>



typedef void(*print)(struct Matrix *);
//functional pointers for struct
typedef float(*Sum)(struct Matrix *, struct Matrix *);
//multiplies the matrix
typedef void(*L1Norm)(struct Matrix *);
typedef float(*Product)(struct Matrix *, struct Matrix *);

typedef void(*initializeVector)(struct Vector *, int rows);




typedef void(*initializeMatrix)(struct Matrix *, int rows, int columns);


typedef struct Matrix{
	int **array;
	L1Norm *vtable_ptr;
	int rows;
	int columns;
	Product product;
	Sum sum;
	initializeMatrix init;
	print printthis;
}MN_Matrix;




void printMatrix(struct Matrix *A){
	int i, j;
	for (i = 0; i < A->rows; i++)
	{
		for (j = 0; j < A->columns; j++)
			printf("%d\t", A->array[i][j]);
		printf("\n");
	}
}








float matrixAddtion(struct Matrix *A, struct Matrix *B){
	if ((A->rows != B->rows) && (A->columns != B->columns))
		printf("Matrices with specified orders can't be added.\n");
	int i, j;
	for (i = 0; i < A->rows; i++)
	{
		for (j = 0; j < A->columns; j++)
			printf("%d\t", A->array[i][j] + B->array[i][j]);
		printf("\n");
	}
}

float matrixProduct(struct Matrix *A, struct Matrix *B)
{
	int c, d, k, sum = 0;
	int multiply[20][20];

	if (A->columns != B->rows)
		printf("Matrices with specified orders can't be multiplied.\n");
	for (c = 0; c < A->rows; c++) {
		for (d = 0; d < B->columns; d++) {
			for (k = 0; k < B->rows; k++) {
				sum = sum + (A->array[c][k]) * (B->array[k][d]);
			}

			multiply[c][d] = sum;
			sum = 0;
		}
	}

	for (c = 0; c < A->rows; c++) {
		for (d = 0; d < B->columns; d++)
			printf("%d\t", multiply[c][d]);

		printf("\n");
	}
}


void matrixL1Norm(struct Matrix *A){
	int c, d, k, sum = 0;
	int larg = 0;
	int i;
	int L1[20];

	if ((A->rows == 0) || (A->columns == 0))
		printf("Norm not found for matrix");
	for (c = 0; c < A->columns; c++) {
		L1[c] = 0;
		for (d = 0; d < A->rows; d++) {
			L1[c] += A->array[d][c];
		}
	}

	for (i = 0; i < A->columns; i++){
		if (L1[i] > larg)
			larg = L1[i];
	}

	printf("Matrix L1Norm called: %d\n", larg);
	return;
}


//definition of constructor for matrix class
void initMatrix(struct Matrix *A, int rows, int columns){
	int i;
	MN_Matrix temp;
	temp.rows = rows;
	temp.product = matrixProduct;
	temp.printthis = printMatrix;
	temp.sum = matrixAddtion;
	temp.columns = columns;

	temp.array = malloc(rows * sizeof(int *));

	for (i = 0; i < rows; i++)
	{
		temp.array[i] = malloc(columns * sizeof(int));
		if (temp.array[i] == NULL)
		{
			fprintf(stderr, "out of memory\n");
			return;
		}
	}
	for (i = 0; i < 4; i++)
	{
		int j;
		for (j = 0; j < 4; j++)
			temp.array[i][j] = 1;
	}

	*A = temp;
}

//Vector class which inherits Matrix class
typedef struct Vector{
	MN_Matrix vec;
	initializeVector init;
}N_Vector;

void vectorL1Norm(struct Matrix *A){
	int i, sum = 0;
	for (i = 0; i< A->rows; i++){
		sum += A->array[i][0];
	}
	printf("Vector L1Norm executed %d\n", sum);
	return;
}

//definition of constructor for vector class
void initVector(struct Vector *ptr, int rows){
	N_Vector nvec;
	nvec.vec.init = initMatrix;
	nvec.vec.init(&nvec.vec, rows, 1);
	*ptr = nvec;
}

int main() {
	L1Norm *vtable_matrix_class = malloc(sizeof(L1Norm));
	vtable_matrix_class[0] = &matrixL1Norm;


	MN_Matrix *mat1 = (MN_Matrix*)malloc(sizeof(N_Vector));
	mat1->init = initMatrix;
	mat1->init(mat1, 4, 4);
	printf("\nMatrix:\n");
	mat1 ->sum(mat1, mat1);


	printf("\nMultiplied matrix gives you :\n");
	mat1->product(mat1, mat1);
	mat1->vtable_ptr = vtable_matrix_class;
	printf("\nTHe calculated L1Norm is :\n");
	mat1->vtable_ptr[0](mat1);

	return 0;
}
